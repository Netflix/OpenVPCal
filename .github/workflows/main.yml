name: Python CI/CD Workflow

on:
  push:
    branches:
      - feature/ci
  pull_request:
    branches:
      - feature/ci

jobs:
  build:
    strategy:
      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
        os: [macos-latest]

    runs-on: ${{ matrix.os }}
    env:
      CI: true

    steps:
      - name: Checkout repository (no LFS)
        uses: actions/checkout@v3
        with:
          lfs: false

      # Install Git LFS and disable auto-smudge on each OS
      - name: Install Git LFS & disable auto-smudge (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install git-lfs -y
          git lfs install --skip-smudge

      - name: Install Git LFS & disable auto-smudge (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install git-lfs
          git lfs install --skip-smudge

      - name: Install Git LFS & disable auto-smudge (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install git-lfs -y
          git lfs install --skip-smudge

      # Fetch only the LFS objects you need
      - name: Fetch specific LFS folders (non-Windows)
        if: runner.os != 'Windows'
        run: |
          git lfs fetch \
            --include="tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_balanced/**,tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_UNBALANCED_WHITE/**,tests/test_open_vp_cal/resources/export/patches/OpenVPCal_Wall1_ITU_R_BT_2020_ST_2084/**,packages/open_vp_cal/src/open_vp_cal/resources/**,tests/tests_spg/resources/**,tests/tests_spgicvfxpatterns/resources/**"

      - name: Fetch specific LFS folders (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git lfs fetch --include='tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_balanced/**,tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_UNBALANCED_WHITE/**,tests/test_open_vp_cal/resources/export/patches/OpenVPCal_Wall1_ITU_R_BT_2020_ST_2084/**,packages/open_vp_cal/src/open_vp_cal/resources/**,tests/tests_spg/resources/**,tests/tests_spgicvfxpatterns/resources/**'

      # Checkout only those paths
      - name: Checkout LFS files (non-Windows)
        if: runner.os != 'Windows'
        run: |
          git lfs checkout \
            tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_balanced/** \
            tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_UNBALANCED_WHITE/** \
            tests/test_open_vp_cal/resources/export/patches/OpenVPCal_Wall1_ITU_R_BT_2020_ST_2084/** \
            packages/open_vp_cal/src/open_vp_cal/resources/** \
            tests/tests_spg/resources/** \
            tests/tests_spgicvfxpatterns/resources/**

      - name: Checkout LFS files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git lfs checkout `
            tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_balanced/** `
            tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_UNBALANCED_WHITE/** `
            tests/test_open_vp_cal/resources/export/patches/OpenVPCal_Wall1_ITU_R_BT_2020_ST_2084/** `
            packages/open_vp_cal/src/open_vp_cal/resources/** `
            tests/tests_spg/resources/** `
            tests/tests_spgicvfxpatterns/resources/**

      # Install EGL dependency on Ubuntu so libEGL.so.1 is available
      - name: Install EGL dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libegl1 \
            libgl1 \
            libglx-mesa0

      # Common Python setup + build + test
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV CLI
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Build Python environment
        run: uv build

      - name: Lint code with Ruff
        run: uv run ruff check ./packages ./tests

      - name: Run tests (verbose, stop on fail)
        run: uv run pytest ./tests -vv --maxfail=1