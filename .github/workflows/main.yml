name: Python CI/CD Workflow

on:
  push:
  pull_request:
  schedule:    # Nightly at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch: {}

jobs:
  build:
    if: ${{ github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' }}
    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
        os: [macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    env:
      CI: true

    steps:
      - name: Checkout repository (no LFS)
        uses: actions/checkout@v3
        with:
          lfs: false

      # Install Git LFS and disable auto-smudge on each OS
      - name: Install Git LFS & disable auto-smudge (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install git-lfs -y
          git lfs install --skip-smudge

      - name: Install Git LFS & disable auto-smudge (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install git-lfs
          git lfs install --skip-smudge

      - name: Install Git LFS & disable auto-smudge (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install git-lfs -y
          git lfs install --skip-smudge

      # Fetch only the LFS objects you need
      - name: Fetch specific LFS folders (non-Windows)
        if: runner.os != 'Windows'
        run: |
          git lfs fetch \
            --include="tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_balanced/**,tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_UNBALANCED_WHITE/**,tests/test_open_vp_cal/resources/export/patches/OpenVPCal_Wall1_ITU_R_BT_2020_ST_2084/**,packages/open_vp_cal/src/open_vp_cal/resources/**,tests/tests_spg/resources/**,tests/tests_spgicvfxpatterns/resources/**"

      - name: Fetch specific LFS folders (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git lfs fetch --include='tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_balanced/**,tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_UNBALANCED_WHITE/**,tests/test_open_vp_cal/resources/export/patches/OpenVPCal_Wall1_ITU_R_BT_2020_ST_2084/**,packages/open_vp_cal/src/open_vp_cal/resources/**,tests/tests_spg/resources/**,tests/tests_spgicvfxpatterns/resources/**'

      # Checkout only those paths
      - name: Checkout LFS files (non-Windows)
        if: runner.os != 'Windows'
        run: |
          git lfs checkout \
            tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_balanced/** \
            tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_UNBALANCED_WHITE/** \
            tests/test_open_vp_cal/resources/export/patches/OpenVPCal_Wall1_ITU_R_BT_2020_ST_2084/** \
            packages/open_vp_cal/src/open_vp_cal/resources/** \
            tests/tests_spg/resources/** \
            tests/tests_spgicvfxpatterns/resources/**

      - name: Checkout LFS files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git lfs checkout `
            tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_balanced/** `
            tests/test_open_vp_cal/resources/TEST_EXR_OPENVPCAL_UNBALANCED_WHITE/** `
            tests/test_open_vp_cal/resources/export/patches/OpenVPCal_Wall1_ITU_R_BT_2020_ST_2084/** `
            packages/open_vp_cal/src/open_vp_cal/resources/** `
            tests/tests_spg/resources/** `
            tests/tests_spgicvfxpatterns/resources/**

      # Install EGL dependency on Ubuntu so libEGL.so.1 is available
      - name: Install EGL dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libegl1 \
            libgl1 \
            libglx-mesa0

      # Common Python setup + build + test
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV CLI
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Build Python environment
        run: uv build

      - name: Lint code with Ruff
        run: uv run ruff check ./packages ./tests

      - name: Run tests (verbose, stop on fail)
        run: uv run pytest ./tests -vv --junitxml=test-results/junit-report.xml

      - name: Report test results (${{ matrix.os }})
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: pytest results (${{matrix.os }})
          path: test-results/junit-report.xml
          reporter: java-junit

  nightly_compile:
      if: ${{ (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/dev' }}
      strategy:
        fail-fast: false
        matrix:
          os: [ubuntu-latest, macos-latest, windows-latest]

      runs-on: ${{ matrix.os }}

      steps:
        - name: Checkout code (no LFS)
          uses: actions/checkout@v3
          with:
            lfs: false

        # Common Python setup + build + test
        - name: Set up Python 3.11
          uses: actions/setup-python@v4
          with:
            python-version: '3.11'

        - name: Install UV CLI
          run: |
            python -m pip install --upgrade pip
            pip install uv

        # Install Git LFS and disable auto-smudge on each OS
        - name: Install Git LFS & disable auto-smudge (Ubuntu)
          if: runner.os == 'Linux'
          run: |
            sudo apt-get update
            sudo apt-get install git-lfs -y
            git lfs install --skip-smudge

        - name: Install Git LFS & disable auto-smudge (macOS)
          if: runner.os == 'macOS'
          run: |
            brew install git-lfs
            git lfs install --skip-smudge

        - name: Install Git LFS & disable auto-smudge (Windows)
          if: runner.os == 'Windows'
          shell: pwsh
          run: |
            choco install git-lfs -y
            git lfs install --skip-smudge

        - name: Fetch only needed LFS resources
          run: |
            git lfs fetch --include="packages/open_vp_cal/src/open_vp_cal/resources/**"
            git lfs checkout packages/open_vp_cal/src/open_vp_cal/resources/**

        - name: Stamp version with date and build ID
          shell: python
          run: |
            import re, os, pathlib
            from datetime import datetime

            # unique build ID (short SHA or “local”)
            build_id = os.getenv("GITHUB_SHA", "")[:8] or "local"
            # day_month_year
            date_str = datetime.utcnow().strftime("%d_%m_%Y")

            init_py = pathlib.Path("packages/open_vp_cal/src/open_vp_cal/__init__.py")
            text = init_py.read_text(encoding="utf8")

            # 1: prefix, 2: existing semver, 3: closing quote
            pattern = re.compile(r'(__version__\s*=\s*")([^"]+)(")')

            def add_date_and_build(m):
                prefix, version, suffix = m.group(1), m.group(2), m.group(3)
                # now append _DD_MM_YYYY_BUILDID
                return f"{prefix}{version}_{date_str}_{build_id}{suffix}"

            new_text = pattern.sub(add_date_and_build, text)
            init_py.write_text(new_text, encoding="utf8")

            # confirm
            ver = re.search(r'__version__\s*=\s*"([^"]+)"', new_text).group(1)
            print(f"Bumped version to: {ver}")

        # On Windows, run build.bat via PowerShell
        - name: Run Windows build
          if: runner.os == 'Windows'
          shell: pwsh
          run: .\build.bat

        # On macOS/Linux, run build.sh via Bash
        - name: Run *nix build
          if: runner.os != 'Windows'
          run: |
            chmod +x build.sh
            ./build.sh

        - name: List files in dist (macOS/Linux)
          if: runner.os != 'Windows'
          run: |
            echo "Files under dist/:"
            ls -lah ./dist
            echo ""
            echo "Recursive listing:"
            ls -R ./dist

        - name: List files in dist (Windows)
          if: runner.os == 'Windows'
          shell: pwsh
          run: |
            Write-Host "Files under Output/:"
            Get-ChildItem Output -File | Format-Table
            Write-Host "`nRecursive listing:"
            Get-ChildItem Output -Recurse | Format-Table

        - name: Upload macOS nightly artifact
          if: runner.os == 'macOS'
          uses: actions/upload-artifact@v4
          with:
            name: nightly-macos
            path: './dist/OpenVPCal-*.dmg'

        - name: Upload Windows nightly artifact
          if: runner.os == 'Windows'
          uses: actions/upload-artifact@v4
          with:
            name: nightly-windows
            path: |
              Output/OpenVPCal-*.exe
              Output/OpenVPCal-*.zip

        - name: Upload Linux nightly artifact
          if: runner.os == 'Linux'
          uses: actions/upload-artifact@v4
          with:
            name: nightly-linux
            path: 'out/nightly-build.tar.gz'
